apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.protobuf'
apply plugin: 'kotlin-kapt'
apply from: '../shared_dependencies.gradle'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 30

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        kapt {
            arguments {
                arg("moduleName", project.getName())
            }
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            proto {
                // In addition to the default 'src/main/proto'
                srcDir '../im-protocol'
                // In addition to the default '**/*.proto' (use with caution).
                // Using an extension other than 'proto' is NOT recommended,
                // because when proto files are published along with class files, we can
                // only tell the type of a file from its extension.
                include '**/*.proto'
            }
            java {
                srcDirs += "${protobuf.generatedFilesBaseDir}/main/java"
                srcDir "${buildDir.absolutePath}/generated/source/kaptKotlin/main/"
            }
        }
        test {
            proto {
                // In addition to the default 'src/main/proto'
                srcDir '../im-protocol'
                // In addition to the default '**/*.proto' (use with caution).
                // Using an extension other than 'proto' is NOT recommended,
                // because when proto files are published along with class files, we can
                // only tell the type of a file from its extension.
                include '**/*.proto'
            }
            java {
                srcDirs += "${protobuf.generatedFilesBaseDir}/main/java"
                srcDir "${buildDir.absolutePath}/generated/source/kaptKotlin/main/"
            }
        }
    }
}

def room_version = "2.2.6"
dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    //protbuf lib
//    api 'com.google.protobuf:protobuf-javalite:3.15.8'
    api('com.google.protobuf:protobuf-java-util:3.15.8')
    api "io.netty:netty-all:4.1.65.Final"

    api "androidx.room:room-runtime:${room_version}"
    api "androidx.room:room-ktx:${room_version}"
    kapt "androidx.room:room-compiler:${room_version}"

    implementation(project(':network_sdk'))

    testImplementation "androidx.room:room-testing:${room_version}"
}


protobuf {
    protoc {
        // You still need protoc like in the non-Android case
        artifact = 'com.google.protobuf:protoc:3.13.0'
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
//                    option "lite"
                }
            }
        }

        // (Java-only) returns tasks for a sourceSet
//        ofSourceSet('main')

        // (Android-only selectors)
        // Returns tasks for a flavor
//        ofFlavor('demo')
        // Returns tasks for a buildType
        ofBuildType('debug')
        ofBuildType('release')
        // Returns tasks for a variant
//        ofVariant('demoRelease')
        // Returns non-androidTest tasks
        ofNonTest()
        // Return androidTest tasks
        ofTest()
    }
}